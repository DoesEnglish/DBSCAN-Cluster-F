# Code made for use in a Jupyter Notebook. May work differently if you're using a different editor.
!pip install basemap==1.2.0 matplotlib==3.1
import numpy as np 
from sklearn.cluster import DBSCAN 
from sklearn.datasets import make_blobs 
from sklearn.preprocessing import StandardScaler 
import matplotlib.pyplot as plt 
%matplotlib inline
import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)

# Since this is created for my learning purposes the following is just a reminder for future me.
# -----centroidLocation: Coordinates of the centroids that will generate the random data.
---------------Example: input: [[4,3], [2,-1], [-1,4]]
-------numSamples: The number of data points we want generated, split over the number of centroids (# of centroids defined in centroidLocation)
---------------Example: 1500
-------clusterDeviation: The standard deviation of the clusters. The larger the number, the further the spacing of the data points within the clusters.
---------------Example: 0.5

def createDataPoints(centroidLocation, numSamples, clusterDeviation):
# Creating random data stored in feature matrix X and response vector y.
    X, y = make_blobs(n_samples=numSamples, centers=centroidLocation, 
                                cluster_std=clusterDeviation)
# Standardizing features by removing the mean and scaling to unit variance
    X = StandardScaler().fit_transform(X)
    return X, y
    
X, y = createDataPoints([[4,3], [2,-1], [-1,4]] , 1500, 0.5)  

#Creating cluster parameters
epsilon = 0.3
minimumSamples = 7
db = DBSCAN(eps=epsilon, min_samples=minimumSamples).fit(X)
labels = db.labels_
labels

# Outlier detection zone
core_samples_mask = np.zeros_like(db.labels_, dtype=bool)
core_samples_mask[db.core_sample_indices_] = True
core_samples_mask
n_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)
n_clusters_
unique_labels = set(labels)
unique_labels

# DBSCAN 2022 (Colorized)
colors = plt.cm.Spectral(np.linspace(0, 1, len(unique_labels)))
for k, col in zip(unique_labels, colors):
    if k == -1:
        # Black used for noise.
        col = 'k'

    class_member_mask = (labels == k)

    # Plotting the datapoints that are clustered
    xy = X[class_member_mask & core_samples_mask]
    plt.scatter(xy[:, 0], xy[:, 1],s=50, c=[col], marker=u'o', alpha=0.5)

    # Plotting the outliers
    xy = X[class_member_mask & ~core_samples_mask]
    plt.scatter(xy[:, 0], xy[:, 1],s=50, c=[col], marker=u'o', alpha=0.5)
    
# End
